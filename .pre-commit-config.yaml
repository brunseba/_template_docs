# Pre-commit configuration for MkDocs Python projects
# See https://pre-commit.com for more information

repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # General file checks
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      
      # YAML validation
      - id: check-yaml
        args: ['--unsafe']  # Allow custom YAML tags for MkDocs
      - id: sort-simple-yaml
        files: \.yaml$
        exclude: mkdocs\.yml|\.github/.*\.yml

      # JSON validation and formatting
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix', '--indent=2']
        exclude: package-lock\.json

      # Python checks
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: ['--pytest-test-first']

      # Documentation and text files
      - id: check-toml
      - id: requirements-txt-fixer

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88']

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=88']

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: 
          - '--max-line-length=88'
          - '--extend-ignore=E203,W503,E501'
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  # Python security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', '.', '-f', 'json', '-o', 'bandit-report.json']
        exclude: ^tests/

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: 
          - '--config-data'
          - |
            {
              extends: default,
              rules: {
                line-length: {max: 120},
                document-start: disable,
                truthy: {allowed-values: [true, false, on, off]},
                comments: {min-spaces-from-content: 1}
              }
            }

  # Markdown linting and formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: 
          - '--config'
          - '.markdownlint.json'
        exclude: CHANGELOG\.md

  # Markdown table formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-tables
          - mdformat-black
        args: ['--wrap=80']
        exclude: CHANGELOG\.md

  # MkDocs validation
  - repo: local
    hooks:
      - id: mkdocs-build-check
        name: MkDocs build check
        entry: mkdocs build --strict --verbose --clean
        language: system
        files: ^(mkdocs\.yml|docs/.*)$
        pass_filenames: false

  # Spell checking for documentation
  - repo: https://github.com/crate-ci/typos
    rev: v1.18.0
    hooks:
      - id: typos
        args: ['--config=.typos.toml']
        exclude: ^(\.git/|site/|\.venv/|venv/)

  # Security scanning for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: \.secrets\.baseline$

  # Check for common security issues in text files
  - repo: https://github.com/thoughtworks/talisman
    rev: v1.32.0
    hooks:
      - id: talisman-commit
        entry: cmd --githook pre-commit

  # Docker linting (if using Docker)
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Dependency vulnerability scanning
  - repo: https://github.com/PyCQA/safety
    rev: 3.0.1
    hooks:
      - id: safety
        args: ['--ignore=70612']  # Ignore specific CVEs if needed

  # Python type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: ['--ignore-missing-imports', '--strict-optional']

# Global configuration
default_language_version:
  python: python3

# Hook execution settings
default_stages: [commit, push]
minimum_pre_commit_version: 3.0.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
